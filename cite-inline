#!/bin/bash

# Original code Copyright (c) 2017 Shane Celis[1]
# Licensed under the MIT License[2]
#
# This comment generated by code-cite[3].
#
# [1]: https://twitter.com/shanecelis
# [2]: https://opensource.org/licenses/MIT
# [3]: https://github.com/shanecelis/code-cite

# cite-inline
#
# Substitute inline citations in a file.

usage() {
    echo "usage: cite-inline [-hnvk] " >&2;
    echo "                    -p -- [cite options] -- " >&2;
    echo "                          add <files>" >&2;
    echo "                          remove <files>" >&2;
    echo "                          clear-cache" >&2;
    echo " -h      Show usage." >&2;
    echo " -n      Do a dry-run: Print to stdout. No file changes." >&2;
    echo " -v      Be verbose." >&2;
    echo " -p      Pass cite options." >&2;
    echo " -k      Keep cite line." >&2;
}
if [ -z "$ROOT_PID" ]; then
    export ROOT_PID=$$;
    trap "if ! cite -W $ROOT_PID; then exit $?; fi" EXIT
fi
# trap 'rc=$?; echo "ERR at line ${LINENO} (rc: $rc)"; exit $rc' ERR
# trap 'rc=$?; echo "EXIT (rc: $rc)"; exit $rc' EXIT
set -ueE -o pipefail;
trap '[ $? -ne 0 ] && echo "error: internal script error at line ${LINENO}."' ERR
dryrun=0;
verbose=0;
pass_cite_options=0;
keep_cite_line=0;
# By default let's use the cache.
while getopts "hnvpk" arg; do
    case "$arg" in
        h) usage;
           exit 0;;
        v) verbose=1;;
        n) dryrun=1;;
        k) keep_cite_line=1;;
        p) pass_cite_options=1;;
        *) usage;
           exit 2;;
    esac
done
# Let's pass these on if we call ourselves.
declare -a flags=();
if [ $OPTIND -gt 1 ]; then
    #flags=("${@:0:$((OPTIND))}");
    #echo "flags printf " $(printf "'%s' " "${flags[@]}") >&2;
    :
fi
# echo "flags $OPTIND = '${flags[*]}'" >&2;
#echo "@ printf " $(printf "'%s' " "${@}") >&2;
shift $((OPTIND-1))
#echo "@ after " $(printf "'%s' " "${@}") >&2;


if [ $pass_cite_options -eq 1 ]; then
    while [ "$1" != "--" ]; do
        flags+=( "$1" );
        shift;
    done
    shift;
fi
#echo "@ after2 " $(printf "'%s' " "${@}") >&2;

#exit 0;
if [ $# -lt 2 ]; then
    usage;
    exit 2;
fi

subcommand="$1";
shift;
case "$subcommand" in
    "add")
        perl_flags="-i.bak";
        if [ $dryrun -eq 1 ]; then
            perl_flags="";
        fi
        # tmpfile="$(mktemp /tmp/cite-inline.XXXXXX)";
        VERBOSE=$verbose KEEP_CITE_LINE=$keep_cite_line perl $perl_flags -p -e '
BEGIN{
  undef $/;
  @flags=();
  while ((my $arg = shift) ne "--") {
    push @flags, $arg;
  }
#  print STDERR "flags = ", join(",",@flags), "\n";
  $quoted_flags = join(" ",map(qq("$_"),@flags));
}
s[^\n?((\s*)//\$ cite ([^\\\n]*)(\\\s*//(.*)$)?)$(\s*/\*\s*Original code Copyright[^\*]+\*/\s*$)?\n?]{
  #my $cmd = "cite $quoted_flags -p \"$2\" -u \"$3\"\n";
  my $cmd = "cite -p \"$2\" $3 $5 $quoted_flags";
  print STDERR "$cmd\n" if $ENV{"VERBOSE"};
  my $citation = `$cmd`;
  die "$citation" if $? != 0;
if ($ENV{"KEEP_CITE_LINE"} || $citation !~ /^\s*$/) {
  if ($ENV{"KEEP_CITE_LINE"} ) {
  # This will keep the cite line:
    "$1\n$citation";
  } else {
  # This will remove the cite line:
    "$citation";
  }
} else {
  "\n";
}
}mge;' \
        -- ${flags[@]+"${flags[@]}"} -- "$@"; # args
             # https://stackoverflow.com/a/7577209/6454690
        # if [ $? -eq 0 ]; then
        #     if [ $dryrun -eq 1 ]; then
        #         cat $tmpfile;
        #     else
        #         cp $tmpfile 
        ;;
    "remove")
        flags="-i";
        if [ $dryrun -eq 1 ]; then
            flags="";
        fi
        perl $flags -pe '
BEGIN{undef $/;}
s!^(\s*//$ cite .*)\s*/\*\s*Original code Copyright[^\*]+\*/!$1!smg' \
        "$@";
        ;;
#     "grep-references")
#         perl -ne '
# print if m!^(\s*//\s*http://stackoverflow.com\S+)!;' "$@";
#         ;;
    "clear-cache")
        if [ -d /tmp/cite-stackoverflow/ ]; then
            rm /tmp/cite-stackoverflow/*;
            echo "Cleared cache.";
        fi
        ;;
    *)
        echo "error: no such subcommand '$subcommand'." >&2;
        exit 4;
esac
