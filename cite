#!/bin/bash
# cite-stackoverflow
#
# Generate a citation for code used from stackoverflow.
#
# Example
# -------
#
# 1. Generate a citation.
#
# $ cite http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
# /*
#    Original code Copyright (c) 2011 cdiggins[1]
#    Modified code Copyright (c) 2016 Shane Celis, @shanecelis[2]
#
#    Licensed under the CC-BY-SA 3.0[3]
#
#    Original code posted to this question[4] and answer[5] from
#    stackoverflow.com where user contributions are licensed under
#    CC-BY-SA 3.0 with attribution required.
#
#    [1]: https://stackoverflow.com/users/184528/cdiggins
#    [2]: https://twitter.com/shanecelis
#    [3]: http://creativecommons.org/licenses/by-sa/3.0/
#    [4]: http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
#    [5]: http://stackoverflow.com/a/7302957/6454690
#  */
#
# 2. Add citations to a file.
#
# If the file LinqExtensions has lines that look like this:
#
#     // http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
#
# A citation will be inserted after that line by running the following command:
#
# $ cite-stackoverflow add-citations LinqExtensions.cs
# warning: Answer not specified for 5 questions; assuming first answer was used.
# warning: Used cache for 15 stackexchange API requests.
#
# 3. Remove citations from a file.
#
# Dependencies: bash, curl, jq, and perl

modified_template() {
# Add prefix (usually whitespace), but don't add it if the line is blank.
cat <<EOF | perl -pe "s/^(?=\s*\S)/$prefix/g;"
/* Original code Copyright (c) $year_created $author_name[1]
   Modified code Copyright (c) $year_modified $modifier_name[2]
   Licensed under the CC-BY-SA 3.0[3]

   Original code posted to this question[4] and answer[5] on
   stackoverflow.com. This comment generated by cite-stackoverflow[6].

   [1]: $author_link
   [2]: $modifier_link
   [3]: http://creativecommons.org/licenses/by-sa/3.0/
   [4]: $question_link
   [5]: $answer_link
   [6]: $cite_stackoverflow_link
 */
EOF
}

unmodified_template() {
# Add prefix (usually whitespace), but don't add it if the line is blank.
cat <<EOF | perl -pe "s/^(?=\s*\S)/$prefix/g;"
/* Original code Copyright (c) $year_created $author_name[1]
   Licensed under the CC-BY-SA 3.0[2]

   Original code posted to this question[4] and answer[5] on
   stackoverflow.com. This comment generated by cite-stackoverflow[6].

   [1]: $author_link
   [2]: http://creativecommons.org/licenses/by-sa/3.0/
   [3]: $question_link
   [4]: $answer_link
   [5]: $cite_stackoverflow_link
 */
EOF
}

# /*
#    Original code Copyright (c) 2011 cdiggins[1]
#    Modified code Copyright (c) 2016 Shane Celis, @shanecelis[2]
#
#    Licensed under the CC-BY-SA 3.0[3]
#
#    Q: ${question_title%%\?}?
#
#    Original code posted to this question[4] and answer[5] from
#    stackoverflow.com where user contributions are licensed under
#    CC-BY-SA 3.0 with attribution required.
#
#    [1]: https://stackoverflow.com/users/184528/cdiggins
#    [2]: https://twitter.com/shanecelis
#    [3]: http://creativecommons.org/licenses/by-sa/3.0/
#    [4]: http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
#    [5]: http://stackoverflow.com/a/7302957/6454690
#  */

config_template() {
    cat <<EOF
# cite config
#
# cite-stackoverflow configuration file.

#modified=1; # modified
#modified=0; # unmodified
#modifier_name="Shane Celis, @shanecelis"; # Name of who modified the code.
#modifier_link="http://twitter.com/shanecelis"; # Link to who modified the code.
#year_modified=2016;
#interactive=1; # interactive
#interactive=0; # non-interactive
EOF
}

cite_stackoverflow_link="https://gist.github.com/shanecelis/ea2b472af1adfcb995d889f85bd0cb98"
# stackexchange client id for 'cite-stackoverflow'. Fine to keep as is.
client_id="10102";
client_key="nvTB2XGxj5eWuyeMCmJTJA((";

usage() {
    echo "usage: cite [-hvCimM] [-n modifier-name] [-l modifier-link] [-y year-modified] [-p prefix]" >&2;
    echo "                      [-c config]" >&2;
    echo "                      <-u question-or-answer-url| -q question-id | -a answer-id>" >&2;
    echo " -h      Show usage." >&2;
    echo " -v      Be verbose." >&2;
    echo " -c      Source config file." >&2;
    echo " -C      Do not use a cache. (StackExchange may throttle you if you don't.)" >&2;
    echo " -m      Mark this code as modified." >&2;
    echo " -M      Mark this code as not modified." >&2;
    echo " -n      Who modified this code?" >&2;
    echo " -l      Where can I find them?" >&2;
    echo " -y      What year was it modified?" >&2;
    echo " -p      Prefix each line of template with 'prefix'; used mainly for alignment." >&2;
    echo " -i      Interactive. Ask user if not specified." >&2;
}
# https://stackoverflow.com/a/17841619/6454690
function join_by { local IFS="$1"; shift; echo "$*"; }

memoize() {
    if [ $use_cache -eq 1 ]; then
        # You will get throttled by stackexchange if you aren't careful with your queries.
        key="$1";
        shift;
        path="/tmp/cite-stackoverflow/$key";
        ! [ -d "/tmp/cite-stackoverflow" ] && mkdir "/tmp/cite-stackoverflow";
        if [ -f "$path" ]; then
            # keys_used=(${keys_used[@]} $key);
            echo "$key" >> /tmp/cite-stackoverflow/keys-used.$ROOT_PID;
            # echo "info: using cache for key $key in process $ROOT_PID." >&2;
            cat "$path";
        else
            echo "info: caching key $key." >&2;
            "$@" | tee "$path";
        fi
    else
        shift;
        "$@";
    fi
}

display_cache_warning() {
    pid=$1;
    keys_used_path=/tmp/cite-stackoverflow/keys-used.$pid;
    # echo "checking $keys_used_path" >&2;
    if [ -f "$keys_used_path" ]; then
    # if [ ${#keys_used[@]} -ne 0 ]; then
        # keys="$(join_by , ${keys_used[@]})";
        if [ $verbose -eq 1 ]; then
            echo "info: Used cache for keys: $(cat $keys_used_path | sort | uniq | tr '\n' ',')" >&2;
        else
            count=$(cat $keys_used_path | sort | uniq | wc -l | xargs); # xargs is working like trim
            echo "warning: Used cache for $count stackexchange API requests." >&2;
        fi
        rm "$keys_used_path";
    fi
}

display_answer_warning() {
    pid=$1;
    no_answer_path=/tmp/cite-stackoverflow/no_answers.$pid;
    if [ -f "$no_answer_path" ]; then
        if [ $verbose -eq 1 ]; then
            echo "warning: Answer not specified for following questions; assuming first answer was used: $(cat $no_answer_path | sort | uniq | tr '\n' ',')" >&2;
        else
            count=$(cat "$no_answer_path" | sort | uniq | wc -l | xargs); # xargs is working like trim
            echo "warning: Answer not specified for $count questions; assuming first answer was used." >&2;
        fi
        rm "$no_answer_path";
    fi
}

stackexchange-query() {
    query="$1";
    memoize_key="${query//\//-}";
    # echo "memo $memoize_key for query $query args $*" >&2;
    memoize "$memoize_key" curl -s 'https://api.stackexchange.com/2.2/'"$query"'?order=desc&sort=votes&site=stackoverflow&key='"$client_key" | gzcat
}
if [ -z "$ROOT_PID" ]; then
    export ROOT_PID=$$;
    trap "display_answer_warning $ROOT_PID; display_cache_warning $ROOT_PID" EXIT
fi
# trap 'rc=$?; echo "ERR at line ${LINENO} (rc: $rc)"; exit $rc' ERR
# trap 'rc=$?; echo "EXIT (rc: $rc)"; exit $rc' EXIT
set -ueE -o pipefail;
trap '[ $? -ne 0 ] && echo "error: internal script error at line ${LINENO}."' ERR
dryrun=0;
verbose=0;
# By default let's use the cache.
use_cache=1;
interactive=0;
modified=2;                     # 2 means it's not clear which
prefix="";
question_id="";
answer_id="";
url="";
config_file="";
while getopts "in:ChvmMq:a:l:y:u:" arg; do
    case "$arg" in
        h) usage;
           exit 0;;
        n) modifier_name="$OPTARG";;
        l) modifier_link="$OPTARG";;
        m) modified=1;;
        M) modified=0;;
        y) year_modified="$OPTARG";;
        i) interactive=1;;
        v) verbose=1;;
        # n) dryrun=1;;
        C) use_cache=0;;
        p) prefix="$OPTARG";;
        c) config_file="$OPTARG";
           if [ -f "$config_file" ]; then
               . "$config_file";
           else
               echo "error: no config file found '$config_file'." >&2;
               exit 7;
           fi;;
        q) question_id="$OPTARG";;
        a) answer_id="$OPTARG";;
        u) url="$OPTARG";;
        *) usage;
           exit 2;;
    esac
done
shift $((OPTIND-1))

if [ -z "$answer_id" ] && [ -z "$question_id" ]; then
    if [ -z "$url" ]; then
        echo "error: URL, question-id, or answer-id required." >&2;
        usage;
        exit 2;
    else
        question_id="$(echo "$url" | perl -ne 'print "$1" if /stackoverflow.com\/questions\/(\d+)/;')"
        answer_id="$(echo "$url" | perl -ne 'print "$1" if /stackoverflow.com\/a\/(\d+)/;')"

        if [ -z "$answer_id" ] && [ -z "$question_id" ]; then
            echo "error: unable to determine answer-id or question-id from url $url" >&2;
            exit 1;
        fi
    fi
fi

if [ -z "$question_id" ]; then
    answer_json="$(stackexchange-query "answers/$answer_id")"
    question_id="$(echo "$answer_json" | jq -r '.items[0].question_id')"
fi


# Use question_id
# ---------------
# question_id=8270464
# question_id=44514662
question_answers_json="$(stackexchange-query 'questions/'$question_id'/answers')"
question_json="$(stackexchange-query 'questions/'$question_id)"
question_link="$(echo "$question_json" | jq -r '.items[0].link')"
question_title="$(echo "$question_json" | jq -r '.items[0].title')"
if [ -z "$answer_id" ]; then
    if [ $interactive -eq 1 ]; then
        open "$question_link";
        declare -a answer_options=()
        while IFS= read -r line; do
            answer_options+=( "$line" )
        done < <(printf "%-20s %5s %s\n" "Name" "Score" "Answer ID"; echo "$question_answers_json" | jq -r '.items[] | .owner.display_name, .score, .answer_id' | perl -e 'while (<>) { $n = $_; $s = <>; $a = <>; chomp($n); printf("%-20s %5d %d\n", $n, $s, $a); }');
        select value in "${answer_options[@]}"; do
            index="$REPLY";
            if [ "$index" -ne 1 ]; then
                answer_id="$(echo "$question_answers_json" | jq -r ".items[$((index - 2))].answer_id")";
                break;
            fi
        done
    else
        answer_id="$(echo "$question_answers_json" | jq -r '.items[0].answer_id')"
        no_answer_path=/tmp/cite-stackoverflow/no_answers.$ROOT_PID;
        echo $question_id >> "$no_answer_path";
        #echo "warning: Answer not specified for question $question_id; assuming first answer (${answer_id}) was used." >&2;
    fi
fi

# Use answer_id
# -------------
#answer_id=7302957
if [ -z "$answer_id" ]; then
    echo "error: no answer ID determined." >&2;
    exit 3;
fi
answer_json="$(stackexchange-query 'answers/'$answer_id)"
author_link="$(echo "$answer_json" | jq -r '.items[0].owner.link')"
answer_link="https://stackoverflow.com/a/$answer_id";
author_name="$(echo "$answer_json" | jq -r '.items[0].owner.display_name')"
question_id="$(echo "$answer_json" | jq -r '.items[0].question_id')"
# answer_id="$(echo "$answer_json" | jq -r '.items[0].answer_id')"
if ! year_created="$(date -r $(echo "$answer_json" | jq -r '.items[0].creation_date') '+%Y')"; then
    echo "error: not able to parse date from the following JSON." >&2;
    echo "$answer_json" >&2;
    exit 1;
fi

if [ $modified -eq 2 ]; then
    if [ $interactive -eq 1 ]; then
        read -p "Did you modify the code? [Y/n]" -n 1 -r
        echo
        if [[ "$REPLY" =~ ^[Yy]$ ]]; then
            modified=1;
        else
            modified=0;
        fi
    else
        echo "warning: assuming the code has been modified." >&2;
        modified=1;
    fi
fi

if [ $modified -eq 1 ]; then
    if [ -z "$modifier_name" ]; then
        if [ $interactive -eq 1 ]; then
            # Ask for modifier's name.
            read -p "Modifier's name: " modifier_name;
            # Might be nice to show the git contributor names:
            # git log --pretty="%an" | sort | uniq
        else
            echo "error: no modifier_name given. Either use -n or -i." >&2;
            usage;
            exit 5;
        fi
    fi
    if [ -z "$modifier_link" ]; then
        if [ $interactive -eq 1 ]; then
            # Ask for modifier's name.
            read -p "Link or email to modifier: " modifier_link
            # Might be nice to show the git contributor emails:
            # git log --pretty="%ae" | sort | uniq
        else
            echo "error: no modifier_link given. Either use -l or -i." >&2;
            usage;
            exit 6;
        fi
    fi
    modified_template;
else
    unmodified_template;
fi


