#!/bin/bash
# cite
#
# Generate a citation for code.
#
# Example
# -------
#
# 1. Generate a citation.
#
# $ cite http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
# /*
#    Original code Copyright (c) 2011 cdiggins[1]
#    Modified code Copyright (c) 2016 Shane Celis, @shanecelis[2]
#
#    Licensed under the CC-BY-SA 3.0[3]
#
#    Original code posted to this question[4] and answer[5] from
#    stackoverflow.com where user contributions are licensed under
#    CC-BY-SA 3.0 with attribution required.
#
#    [1]: https://stackoverflow.com/users/184528/cdiggins
#    [2]: https://twitter.com/shanecelis
#    [3]: http://creativecommons.org/licenses/by-sa/3.0/
#    [4]: http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
#    [5]: http://stackoverflow.com/a/7302957/6454690
#  */
#
# 2. Add citations to a file.
#
# If the file LinqExtensions has lines that look like this:
#
#     // http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
#
# A citation will be inserted after that line by running the following command:
#
# $ cite-stackoverflow add-citations LinqExtensions.cs
# warning: Answer not specified for 5 questions; assuming first answer was used.
# warning: Used cache for 15 stackexchange API requests.
#
# 3. Remove citations from a file.
#
# Dependencies: bash, curl, jq, mo, and perl

# /*
#    Original code Copyright (c) 2011 cdiggins[1]
#    Modified code Copyright (c) 2016 Shane Celis, @shanecelis[2]
#
#    Licensed under the CC-BY-SA 3.0[3]

#
#    Q: ${question_title%%\?}?
#
#    Original code posted to this question[4] and answer[5] from
#    stackoverflow.com where user contributions are licensed under
#    CC-BY-SA 3.0 with attribution required.
#
#    [1]: https://stackoverflow.com/users/184528/cdiggins
#    [2]: https://twitter.com/shanecelis
#    [3]: http://creativecommons.org/licenses/by-sa/3.0/
#    [4]: http://stackoverflow.com/questions/3151702/discriminated-union-in-c-sharp
#    [5]: http://stackoverflow.com/a/7302957/6454690
#  */
if ! bin_path=$(readlink "$0"); then
    bin_path="$0";
fi
bin_dir=$(dirname "$bin_path");

code_cite_link="https://github.com/shanecelis/code-cite"
# stackexchange client id for 'cite-stackoverflow'. Fine to keep as is.
client_id="10102";
client_key="nvTB2XGxj5eWuyeMCmJTJA((";

source "$HOME/bin/mo";
template_dir="$bin_dir/templates/";
template="stackoverflow";
year_modified=2016
modifier_name="Shane Celis"
modifier_link="https://twitter.com/shanecelis"
license="ccbysa"
license_name=""
license_link=""
note=""
#license_name="CC-BY-SA 3.0"
#license_link="http://creativecommons.org/licenses/by-sa/3.0/"

inline_link_count=0
inline_link() {
    inline_link_count=$((inline_link_count + 1));
    echo $inline_link_count;
}
ref_link_count=0
ref_link() {
    ref_link_count=$((ref_link_count + 1));
    echo $ref_link_count;
}

usage() {
    echo "usage: cite [-hvCimMTL] [-n modifier-name] [-U modifier-link] [-y year-modified] [-p prefix]" >&2;
    echo "            [-l license] [-N notes] [-a author-name] [-A author-link]" >&2;
    echo "            [-c config] [-t template] [-W pid] [-e eval-string]" >&2;
    echo "            <-u url | -q question-id | -a answer-id>" >&2;
    echo " -h      Show usage." >&2;
    echo " -v      Be verbose." >&2;
    echo " -c      Source config file." >&2;
    echo " -C      Do not use a cache. (StackExchange may throttle you if you don't.)" >&2;
    echo " -m      Mark this code as modified." >&2;
    echo " -M      Mark this code as not modified." >&2;
    echo " -N      Make note of something in copyright message. " >&2;
    echo " -n      Who modified this code?" >&2;
    echo " -y      What year was it modified?" >&2;
    echo " -T      List templates" >&2;
    echo " -p      Prefix each line of template with 'prefix', mainly used for alignment." >&2;
    echo " -i      Interactive. Ask user if not specified." >&2;
}
# https://stackoverflow.com/a/17841619/6454690
function join_by { local IFS="$1"; shift; echo "$*"; }

display_cache_warning() {
    pid=$1;
    keys_used_path=/tmp/cite-stackoverflow/keys-used.$pid;
    # echo "checking $keys_used_path" >&2;
    if [ -f "$keys_used_path" ]; then
    # if [ ${#keys_used[@]} -ne 0 ]; then
        # keys="$(join_by , ${keys_used[@]})";
        if [ $verbose -eq 1 ]; then
            echo "info: Used cache for keys: $(cat $keys_used_path | sort | uniq | tr '\n' ',')" >&2;
        else
            count=$(cat $keys_used_path | sort | uniq | wc -l | xargs); # xargs is working like trim
            echo "warning: Used cache for $count stackexchange API requests." >&2;
        fi
        rm "$keys_used_path";
        return 1;
    fi
    return 0;
}

display_answer_warning() {
    pid=$1;
    no_answer_path=/tmp/cite-stackoverflow/no_answers.$pid;
    if [ -f "$no_answer_path" ]; then
        if [ $verbose -eq 1 ]; then
            echo "warning: Answer not specified for following questions: $(cat $no_answer_path | sort | uniq | tr '\n' ',')" >&2;
        else
            count=$(cat "$no_answer_path" | sort | uniq | wc -l | xargs); # xargs is working like trim
            echo "warning: Answer not specified for $count questions." >&2;
        fi
        rm "$no_answer_path";
        return 1;
    fi
    return 0;
}

display_modified_warning() {
    pid=$1;
    modified_path=/tmp/cite-stackoverflow/modified.$pid;
    if [ -f "$modified_path" ]; then
        if [ $verbose -eq 1 ]; then
            echo "warning: not specified whether code was modified for following questions: $(cat $modified_path | sort | uniq | tr '\n' ',')" >&2;
        else
            count=$(cat "$modified_path" | sort | uniq | wc -l | xargs); # xargs is working like trim
            echo "warning: Not specified whether code was modified for $count cases." >&2;
        fi
        rm "$modified_path";
        return 1;
    fi
    return 0;
}

display_warnings() {
    err=0;
    trap - ERR
    set +e;
    display_answer_warning $1;
    let "err|=$?"
    display_cache_warning $1;
    let "err|=$?"
    display_modified_warning $1;
    let "err|=$?"
    set -e;
    return $err;
}

if [ -z "$ROOT_PID" ]; then
    export ROOT_PID=$$;
    trap "display_warnings $ROOT_PID" EXIT
fi
# trap 'rc=$?; echo "ERR at line ${LINENO} (rc: $rc)"; exit $rc' ERR
# trap 'rc=$?; echo "EXIT (rc: $rc)"; exit $rc' EXIT
#set -ueE -o pipefail;
set -eE -o pipefail;
trap '[ $? -ne 0 ] && echo "error: internal script error at line ${LINENO}."' ERR
dryrun=0;
verbose=0;
# By default let's use the cache.
use_cache=1;
interactive=0;
modified=2;                     # 2 means it's not clear which
# modifier_name="";
# modifier_link="";
# year_modified="";
prefix="";
question_id="";
answer_id="";
url="";
config_file="$bin_dir/config.json";
stackexchange_site="stackoverflow";
opts="a:A:U:LN:e:W:Tin:Chvmp:Mq:a:l:y:u:t:";
while getopts "$opts" arg; do
    case "$arg" in
        h) usage;
           exit 0;;
        n) modifier_name="$OPTARG";;
        U) modifier_link="$OPTARG";;
        N) note="$OPTARG";;
        l) license="$OPTARG";;
        L) echo "Licenses available from $bin_dir/licenses.json: ";
           cat "$config_file" | jq -r '.licenses | keys | .[]';
           exit 0;;
        m) modified=1;;
        M) modified=0;;
        a) author_name="$OPTARG";;
        A) author_link="$OPTARG";;
        y) year_modified="$OPTARG";;
        i) interactive=1;;
        v) verbose=1;;
        # n) dryrun=1;;
        C) use_cache=0;;
        p) prefix="$OPTARG";;
        c) config_file="$OPTARG";
           if ! [ -f "$config_file" ]; then
               echo "error: no config file found '$config_file'." >&2;
               exit 7;
           fi;;
        q) question_id="$OPTARG";;
        e) eval "$OPTARG";;
        a) answer_id="$OPTARG";;
        u) url="$OPTARG";;
        t) template="$OPTARG";;
        W) display_warnings $OPTARG;
           exit $?;;
        T) echo "Templates available from $template_dir: ";
           (cd $template_dir; echo * | tr ' ' '\n');
           exit 0;;
        *) usage;
           exit 2;;
    esac
done
#shift $((OPTIND-1))

if [ -z "$license_name" ]; then
    license_name=$(cat "$config_file" | jq -r ".licenses.$license.name");
fi
if [ -z "$license_link" ]; then
    license_link=$(cat "$config_file" | jq -r ".licenses.$license.link");
fi

for backend in $bin_dir/backends/*; do
    if output="$($backend ignoreopts "$opts" "$@" 2> /dev/null)"; then
       eval "$output";
    fi
done

if [ $modified -eq 2 ]; then
    if [ $interactive -eq 1 ]; then
        read -p "Did you modify the code? [Y/n]" -n 1 -r
        echo
        if [[ "$REPLY" =~ ^[Yy]$ ]]; then
            modified=1;
        else
            modified=0;
        fi
    else
        # echo "warning: assuming the code has not been modified." >&2;
        modified_path=/tmp/cite-stackoverflow/modified.$ROOT_PID;
        echo $question_id >> "$modified_path";
        modified=0;
    fi
fi

if [ $modified -eq 1 ]; then
    if [ -z "$modifier_name" ]; then
        if [ $interactive -eq 1 ]; then
            # Ask for modifier's name.
            read -p "Modifier's name: " modifier_name;
            # Might be nice to show the git contributor names:
            # git log --pretty="%an" | sort | uniq
        else
            echo "error: no modifier_name given. Either use -n or -i." >&2;
            usage;
            exit 5;
        fi
    fi
    if [ -z "$modifier_link" ]; then
        if [ $interactive -eq 1 ]; then
            # Ask for modifier's link.
            read -p "Link or email to modifier: " modifier_link
            # Might be nice to show the git contributor emails:
            # git log --pretty="%ae" | sort | uniq
        else
            echo "error: no modifier_link given. Either use -l or -i." >&2;
            usage;
            exit 6;
        fi
    fi
    if [ -z "$year_modified" ]; then
        if [ $interactive -eq 1 ]; then
            read -p "Year modified: " year_modified
        else
            echo "error: no year_modified given. Either use -y or -i." >&2;
            usage;
            exit 6;
        fi
    fi
else
    modifier_name="";
fi
# Add prefix (usually whitespace), but don't add it if the line is blank.
#prefix_length=$(echo -n "$prefix" | wc -c)
# Folding had a couple issues:
# 1. It'd fold the URLs.
# 2. It'd fold without adding enough spaces to have the text flush.
#mo "$template" | fold -sw $((80 - prefix_length)) | perl -pe "s/^(?=\s*\S)/$prefix/g;";
if [ -f "$template_dir/$template" ]; then
    mo "$template_dir/$template" | perl -pe "s/^(?=\s*\S)/$prefix/g;";
else
    echo "error: no template $template_dir/$template" >&2;
    exit 9;
fi
